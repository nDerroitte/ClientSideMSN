/*  ==================================================================================================================*\
 *   Ben Mariem Sami - Derroitte Natan - Testouri Mehdi -     Project  - O.O.S.E
 *
 *    GUIList class
\*  ==================================================================================================================*/
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.event.KeyEvent;
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Collections;
import java.util.Comparator;
import java.util.Vector;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;

/**
 *
 * Made via Netbeans and StackOverflow
 */

public class GUIList extends GUI
{
    private javax.swing.JLabel Name;
    private javax.swing.JComboBox<String> Status;
    private javax.swing.JLabel StatusIcon;
    private javax.swing.JLabel Title;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> list;
    private java.awt.Panel panelName;
    private Vector<UserGUI> usersList;
    private UserGUI thisUser;

    /**
     * Constructor of the GUIList.
     * @param list : A list of UserGUI corresponding to the list of Clients connected to the server.
     * @param thisUser : An UserGUI object corresponding to the client who want to generate the boddy List.
     * @param sender : Object responsible to make the link between the GUI and the Network. Allows the GUI to
     *               send request to the server.
     * @throws IOException
     * @see GUIInstantiation
     */
    public GUIList(Vector<UserGUI> list, UserGUI thisUser,Sender sender) throws IOException
    {
        this.usersList = list;
        this.thisUser = thisUser;
        this.sender = sender;
        sender.seePeople();
        initComponents();
        //Sort the array by the Status of the clients.
        Collections.sort(usersList, new Comparator<UserGUI>() {
            @Override
            public int compare(UserGUI o1, UserGUI o2)
            {
                if(o1.getStatus() > o2.getStatus())
                    return 1;
                else if (o1.getStatus() < o2.getStatus())
                    return -1;
                else
                    return 0;
            }
        });
    }

    /**
     * Methods that precises what the programs need to do when the windows is close.
     * @return The value corresponding on the Exit on Close
     */
    private int handleClose()
    {
        return javax.swing.WindowConstants.EXIT_ON_CLOSE;
    }

    /**
     * This piece of code was auto-generated by the NetBeans 8.1 IDE.
     * @see GUI
     */
    protected void initComponents()
    {
        panelName = new java.awt.Panel();
        Status = new javax.swing.JComboBox<>();
        Title = new javax.swing.JLabel();
        Name = new javax.swing.JLabel();
        StatusIcon = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        updateList(usersList);

        setDefaultCloseOperation(handleClose());

        //Add a event when closing the window
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent)
            {
                sender.closeConnection();

            }
        });

        //Changing the Font.
        try
        {
            InputStream myStream = new BufferedInputStream(new FileInputStream(Police));
            Font font = Font.createFont(Font.TRUETYPE_FONT, myStream);
            Font sizedFont = font.deriveFont(28f);
            Name.setFont(sizedFont);
            sizedFont = font.deriveFont(20f);
            Status.setFont(sizedFont);
            sizedFont = font.deriveFont(35f);

            Title.setFont(sizedFont);
        }
        catch(FontFormatException e)
        {
            System.err.println("FontFormatException: " + e.getMessage());
        }
        catch (IOException e)
        {
            System.err.println("Caught IOException: " + e.getMessage());
        }
        panelName.setBackground(new java.awt.Color(210, 210, 198));
        //Setting up the list.
        Status.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Available", "Away", "Busy" }));
        Status.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                StatusActionPerformed(evt);
            }
        });

        Title.setText("Live Messenger ULG");

        Name.setText(thisUser.getNickname());

        StatusIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource(ImageAvailable))); // NOI18N

        javax.swing.GroupLayout panelNameLayout = new javax.swing.GroupLayout(panelName);
        panelName.setLayout(panelNameLayout);
        panelNameLayout.setHorizontalGroup(
            panelNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNameLayout.createSequentialGroup()
                .addGroup(panelNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelNameLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(StatusIcon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Name)
                        .addGap(0, 94, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelNameLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(Title)))
                .addContainerGap())
        );
        panelNameLayout.setVerticalGroup(
            panelNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelNameLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Title)
                .addGap(18, 18, 18)
                .addGroup(panelNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Name)
                    .addComponent(StatusIcon)))
        );

        Container contai = getContentPane();
        contai.setBackground( new Color(234,233,214) );
        pack();
    }

    /**
     * Method responsible of changing the status from the rolling menu.
     * @param evt : Event which catches the change.
     */
    private void StatusActionPerformed(java.awt.event.ActionEvent evt)
    {
        try
        {
            if(Status.getSelectedItem() == "Available")
            {
                sender.upDateStatus(Constants.ONLINE);
                StatusIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource(ImageAvailable)));
            }
            else if(Status.getSelectedItem() == "Busy")
            {
                sender.upDateStatus(Constants.BUSY);
                StatusIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource(ImageBusy)));
            }
            else if(Status.getSelectedItem() == "Away")
            {
                sender.upDateStatus(Constants.AWAY);
                StatusIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource(ImageAway)));
            }
        }
        catch (IOException e)
        {
           // e.printStackTrace();
        }
    }

    /**
     * Method allowing the user to chat with another Client when double Cliking on his name.
     * @param evt :  Event which catches the double click.
     */
    private void listMouseClicked(java.awt.event.MouseEvent evt)
    {
        if (evt.getClickCount() == 2)
            newConversation();
    }

    /**
     * Method allowing the user to chat with another Client when pressing enter while having his name selected.
     * @param evt :  Event which catches the enter key.
     */
    private void listKeyReleased(java.awt.event.KeyEvent evt)
    {
        if (evt.getKeyCode()== KeyEvent.VK_ENTER)
            newConversation();
    }

    /**
     * Create a new conversation to the selected client if the conversation doesn't already exit.
     */
    private void newConversation()
    {
        int i =  list.getSelectedIndex();
        if(usersList.get(i).conversation == null)
            usersList.get(i).conversation = GUIInstantiation.createMessageWindow(usersList.get(i),thisUser,sender);
    }

    /**
     * Method allowing the Network to update the list of users.
     * @param newList : the new List of users to display.
     */
    public void updateList(Vector<UserGUI> newList)
    {
        //Sorting the new list.
        Collections.sort(newList, new Comparator<UserGUI>() {
            @Override
            public int compare(UserGUI o1, UserGUI o2)
            {
                if(o1.getStatus() > o2.getStatus())
                    return 1;
                else if (o1.getStatus() < o2.getStatus())
                    return -1;
                else
                    return 0;
            }
        });

        usersList.clear();
        usersList = newList;
        list = new javax.swing.JList(newList);

        try
        {
            InputStream myStream = new BufferedInputStream(new FileInputStream(Police));
            Font font = Font.createFont(Font.TRUETYPE_FONT, myStream);
            Font sizedFont = font.deriveFont(20f);
            list.setFont(sizedFont);
        }
        catch(FontFormatException e)
        {
            System.err.println("FontFormatException: " + e.getMessage());
        }
        catch (IOException e)
        {
            System.err.println("Caught IOException: " + e.getMessage());
        }
        list.setCellRenderer(new DefaultListCellRenderer()
        {
            @Override
            public Component getListCellRendererComponent(JList list, Object value, int index,
                                                          boolean isSelected, boolean cellHasFocus)
            {
                Component c = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (value instanceof UserGUI)
                {
                    User nextUser = (User) value;
                    setText(nextUser.getNickname());
                    if(nextUser.getStatus() == Constants.ONLINE)
                        setIcon(new DiamondIcon(Color.green));
                    else if(nextUser.getStatus() == Constants.AWAY)
                        setIcon(new DiamondIcon(Color.ORANGE));
                    else if(nextUser.getStatus() == Constants.BUSY)
                        setIcon(new DiamondIcon(Color.RED));
                    else if(nextUser.getStatus() == Constants.OFFLINE)
                        setIcon(new DiamondIcon(Color.BLACK));
                }
                return c;
            }

        });
        list.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listMouseClicked(evt);
            }
        });
        list.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                listKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(list);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(panelName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(panelName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE)
                                .addContainerGap())
        );
    }

}
