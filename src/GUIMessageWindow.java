/*  ==================================================================================================================*\
 *   Ben Mariem Sami - Derroitte Natan - Testouri Mehdi -     Project  - O.O.S.E
 *
 *    GUIMessageWindow class
\*  ==================================================================================================================*/
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.event.KeyEvent;
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.Calendar;


/**
 *
 * Made via Netbeans
 */
public class GUIMessageWindow extends GUI
{

    private javax.swing.JLabel Name;
    private javax.swing.JLabel backgroundImage;
    private javax.swing.JTextArea conversation;
    private javax.swing.JTextArea inputText;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton sendButton;

    private UserGUI otherUser;
    private UserGUI thisUser;
    private String hour;

    /**
     * Constructor of GUIMessageWindow
     * @param otherUser : An UserGUI object corresponding to the client whom we want to send a message
     * @param thisUser : An UserGUI object corresponding to the client who want to send the message
     * @param sender : Object responsible to make the link between the GUI and the Network. Allows the GUI to
     *               send request to the server.
     * @see GUIInstantiation
     */
    public GUIMessageWindow(UserGUI otherUser, UserGUI thisUser, Sender sender)
    {
        this.otherUser = otherUser;
        this.thisUser = thisUser;
        this.sender = sender;
        initComponents();
    }
    /**
     * Methods that precises what the programs need to do when the windows is close.
     * @return The value corresponding to do nothing on close
     */
    private int handleClose()
    {
        return 1;
    }

    /**
     * This piece of code was auto-generated by the NetBeans 8.1 IDE.
     * @see GUI
     */
    protected void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        sendButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        conversation = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        inputText = new javax.swing.JTextArea();
        Name = new javax.swing.JLabel();
        backgroundImage = new javax.swing.JLabel();

        setDefaultCloseOperation(handleClose());
        //Add a event when closing the window
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent)
            {
                otherUser.conversation.setVisible(false);
                otherUser.conversation.dispose();
                otherUser.conversation = null;
            }
        });
        //Setting up the background image
        setBackground(new java.awt.Color(0, 63, 216));
        setMaximumSize(new java.awt.Dimension(800, 577));
        setSize(new java.awt.Dimension(800, 557));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setBackground(new java.awt.Color(0, 63, 216));
        jPanel1.setMaximumSize(new java.awt.Dimension(800, 577));
        jPanel1.setOpaque(false);
        //Send button
        sendButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(ImageButton))); // NOI18N
        sendButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                sendButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setBorder(null);
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        conversation.setEditable(false);
        conversation.setColumns(20);
        //Changing font
        try
        {
            InputStream myStream = new BufferedInputStream(new FileInputStream(Police));
            Font font = Font.createFont(Font.TRUETYPE_FONT, myStream);
            Font sizedFont = font.deriveFont(30f);
            conversation.setFont(sizedFont);
            inputText.setFont(sizedFont);
            sizedFont = font.deriveFont(19f);
            Name.setFont(sizedFont);

        }
        catch(FontFormatException e)
        {
            System.err.println("FontFormatException: " + e.getMessage());
        }
        catch (IOException e)
        {
            System.err.println("Caught IOException: " + e.getMessage());
        }
        conversation.setRows(5);
        conversation.setBorder(null);
        jScrollPane1.setViewportView(conversation);

        jScrollPane2.setBorder(null);
        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        inputText.setColumns(20);
        inputText.setRows(5);
        inputText.setBorder(null);
        inputText.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                inputTextKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(inputText);

        Name.setForeground(new java.awt.Color(255, 255, 255));
        Name.setText(otherUser.getNickname());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(128, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(Name)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 635, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(9, 9, 9)))))
                .addGap(28, 28, 28))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(Name)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(jPanel1, gridBagConstraints);

        backgroundImage.setBackground(new java.awt.Color(0, 63, 216));
        backgroundImage.setIcon(new javax.swing.ImageIcon(getClass().getResource(ImageBackground)));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(backgroundImage, gridBagConstraints);

        pack();
    }

    /**
     * Method which simply get the current time.
     */
    private void getCurrentTime()
    {
        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
        hour = sdf.format(cal.getTime());
    }

    /**
     * Method responsible the event when the send button is perform.
     * @param evt : The event which catches the button press.
     */
    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt)
    {
        getCurrentTime();
        sendMsg(otherUser.getNickname(),inputText.getText());
        addMessage(thisUser.getNickname(),inputText.getText(),hour);
    }

    /**
     * Allow to send a message by pressing enter and not always pressing the button.
     * @param evt : Key event which catches the enter press
     */
    private void inputTextKeyReleased(java.awt.event.KeyEvent evt)
    {
        if (evt.getKeyCode()==KeyEvent.VK_ENTER)
        {
            String tmp = inputText.getText();
            //We remove the last char : the enter
            if (tmp != null && tmp.length() > 0)
                tmp = tmp.substring(0, tmp.length() - 1);
             getCurrentTime();
            sendMsg(otherUser.getNickname(),inputText.getText());
            addMessage(thisUser.getNickname(),tmp,hour);
        }
    }

    /**
     * Send a message to the server
     * @param name : Name of the person who sent the message
     * @param message : The message itself
     */
    private void sendMsg(String name, String message)
    {
        try
        {
            sender.sendMsg(name, message);
        }
        catch (IOException e)
        {
            GUIManager.popError("Couldn't send message");
        }
    }

    /**
     * Methods responsible to add a message to the window. Works if we send or received a message.
     * @param name : Name of the person who sent the message
     * @param message : The message itself
     * @param time : The time when the message was send in a "HH:mm" form.
     */
    private void addMessage(String name, String message,String time)
    {
        conversation.setText(conversation.getText() + "\n[" + time + "] "+name +": " + message);
        inputText.setText("");
    }

    /**
     * Methods responsible to display the message received.
     * @param message : String containing the message
     * @param time : The time when the message was send in a "HH:mm" form.
     */
    public void receviedMessage(String message, String time)
    {
        addMessage(otherUser.getNickname(),message,time);
    }
}
