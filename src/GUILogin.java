/*  ==================================================================================================================*\
 *   Ben Mariem Sami - Derroitte Natan - Testouri Mehdi -     Project  - O.O.S.E
 *
 *    GUILogin class
\*  ==================================================================================================================*/
import java.awt.*;
import java.awt.event.KeyEvent;
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

import static java.lang.Thread.sleep;

/**
 * Made via NetBeans
 */
public class GUILogin extends GUI
{
    private String passwordString = new String();
    private String printingString = new String();

    private javax.swing.JButton Boutton;
    private javax.swing.JLabel Title;
    private javax.swing.JTextField inputName;
    private javax.swing.JTextField inputPassword;
    private javax.swing.JLabel name;
    private javax.swing.JLabel password;

    private static int login;

    /**
     * Constructor of the GUILogin.
     * @param sender : Object responsible to make the link between the GUI and the Network. Allows the GUI to
     *               send request to the server.
     * @see GUIInstantiation
     */
    public GUILogin(Sender sender)
    {
        this.login = Constants.LOGIN_PENDING;
        this.sender =sender;
        initComponents();
    }

    /**
     * Methods that precises what the programs need to do when the windows is close.
     * @return The value corresponding on the Exit on Close
     */
    private int handleClose()
    {
        return javax.swing.WindowConstants.EXIT_ON_CLOSE;
    }

    /**
     * This piece of code was auto-generated by the NetBeans 8.1 IDE.
     * @see GUI
     */
    protected void initComponents()
    {
        name = new javax.swing.JLabel();
        inputName = new javax.swing.JTextField();
        password = new javax.swing.JLabel();
        inputPassword = new javax.swing.JTextField();
        Title = new javax.swing.JLabel();
        Boutton = new javax.swing.JButton();

        setDefaultCloseOperation(handleClose());
        //Adding a new event when closing the window.
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent)
            {
                sender.closeConnection();
            }
        });
        setBackground(new java.awt.Color(234, 233, 214));
        //Changing Font.
        try
        {
            InputStream myStream = new BufferedInputStream(new FileInputStream(Police));
            Font font = Font.createFont(Font.TRUETYPE_FONT, myStream);
            Font sizedFont = font.deriveFont(28f);
            name.setFont(sizedFont);
            inputName.setFont(sizedFont);
            password.setFont(sizedFont);
            inputPassword.setFont(sizedFont);
            sizedFont = font.deriveFont(35f);

            Title.setFont(sizedFont);
        }
        catch(FontFormatException e)
        {
            System.err.println("FontFormatException: " + e.getMessage());
        }
        catch (IOException e)
        {
            System.err.println("Caught IOException: " + e.getMessage());
        }
        name.setText("Name");
        Container c = getContentPane();
        c.setBackground( new Color(234,233,214) );

        password.setText("Password");

        inputPassword.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                inputPasswordKeyReleased(evt);
            }
        });

        Title.setText("Live Messenger ULG");

        Boutton.setIcon(new javax.swing.ImageIcon(getClass().getResource(ImageButton))); // NOI18N
        Boutton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                BouttonActionPerformed();
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Boutton, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(23, 23, 23)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(password)
                                .addComponent(name)
                                .addComponent(inputName, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                                .addComponent(inputPassword)))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(56, 56, 56)
                            .addComponent(Title))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Title, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(name)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(password)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(inputPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addComponent(Boutton, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );
        pack();
    }

    /**
     * Method allowing the user the try to connect to the server.
     */
    private synchronized void  BouttonActionPerformed()
    {
        try
        {
            sender.authentication(inputName.getText(),passwordString);
        }
        catch (IOException e)
        {
            GUIManager.popError("Enter a username and password");
            return;
        }
        //We want until the servers respond
        while(login == Constants.LOGIN_PENDING)
        {
            try
            {
                wait();
                //Login successes, we close the login window and allow the creation of the boddyList.
                if(login == Constants.LOGIN_SUCCESS)
                {
                    GUIManager.updateMe(inputName.getText());
                    GUI.WaitLogin = false;
                    setVisible(false);
                    dispose();
                }
                //Login failed, we keep the window.
                if(login == Constants.LOGIN_FAILURE || login == Constants.LOGIN_TIMEOUT ||
                        login == Constants.LOGIN_BLACKLISTED_USER || login == Constants.LOGIN_INVALID_PASSWORD)
                {
                    sender.closeConnection();
                }
            }
            catch (InterruptedException e)
            {
                GUIManager.popError("");
            }
        }
    }

    /**
     * Allows the Login to keep going and react in function of the value of login
     * @param loginState : the new value of login.
     */
    public synchronized void notifyLogin(int loginState)
    {
        login = loginState;
        notify();
    }

    /**
     * Method responsible of all key action while selecting the password field.
     * It could be simple input and changing it to *, and enter key to perform the button action.
     * @param evt : Object responsible to make the link between the GUI and the Network. Allows the GUI to
     *               send request to the server.
     */
    private void inputPasswordKeyReleased(java.awt.event.KeyEvent evt)
    {
        //Key Enter -> we do the action of the button.
        if (evt.getKeyCode()== KeyEvent.VK_ENTER)
           BouttonActionPerformed();
        //Key delete -> we remove a char of * and in the password.
        else if (evt.getKeyCode()== KeyEvent.VK_BACK_SPACE || evt.getKeyCode()== KeyEvent.VK_DELETE)
        {
            if (printingString.length()!=0)
                printingString = printingString.substring(0, printingString.length() - 1);
            if (passwordString.length()!=0)
                passwordString = passwordString.substring(0,printingString.length()-1);
        }
        //We don't add a * if the key pressed is Maj or CAPS LOCK
        else if (evt.getKeyCode()== KeyEvent.VK_SHIFT||evt.getKeyCode()== KeyEvent.VK_CAPS_LOCK)
            return;
        //Change the text to *.
        else
        {
            String temp = inputPassword.getText();
            if (temp.length() != 0)
                passwordString = passwordString.concat(temp.substring(temp.length() - 1));
            else
                passwordString = passwordString.concat(temp);
            printingString = printingString.concat("*");
            inputPassword.setText(printingString);
        }
    }
}
